{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","firstName","lastName","gender","age","destination","dietary","isVegan","isKosher","isLactoseFree","handleChange","bind","assertThisInitialized","event","_event$target","target","name","value","checked","type","setState","prevState","objectSpread","defineProperty","react_default","a","createElement","onChange","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a59ff9e.chunk.js","sourcesContent":["import React from 'react'\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      gender: \"\",\n      age: \"\",\n      destination: \"\",\n      dietary: {\n        isVegan: false,\n        isKosher: false,\n        isLactoseFree: false\n      }\n    }\n  this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(event){\n    const {name, value, checked, type} = event.target\n    type === \"checkbox\" ? \n      this.setState(prevState => {\n        return {dietary: {\n          ...prevState.dietary,\n          [name] : checked} }}) \n    : this.setState({ [name]: value})\n  }\n\n  render(){\n    return(\n      <div>\n      <form>\n        <input \n          type=\"text\"\n          name=\"firstName\"\n          value={this.state.firstName}\n          onChange={this.handleChange}\n          placeholder=\"First name\"\n        />\n        <br />\n        <input \n          type=\"text\"\n          name=\"lastName\"\n          value={this.state.lastName}\n          onChange={this.handleChange}\n          placeholder=\"Last name\"\n        />\n        <br />\n        <input \n          type=\"text\"\n          name=\"age\"\n          value={this.state.age}\n          onChange={this.handleChange}\n          placeholder=\"Age\"\n        />\n        <br />\n        <label>\n        <input \n          type=\"radio\"\n          name=\"gender\"\n          value=\"male\"\n          checked={this.state.gender === \"male\"}\n          onChange={this.handleChange}\n        />Male\n        </label>\n        <br />\n        <label>\n        <input \n          type=\"radio\"\n          name=\"gender\"\n          value=\"female\"\n          checked={this.state.gender === \"female\"}\n          onChange={this.handleChange}\n        />Female\n        </label>\n        <br />\n        <h4>Do you have any dietary restrictions?</h4>\n        <label>\n        <input \n          type=\"checkbox\"\n          name=\"isVegan\"\n          onChange={this.handleChange}\n          checked={this.state.dietary.isVegan}\n        />Vegan \n        </label>\n        <br />\n        <label>\n        <input \n          type=\"checkbox\"\n          name=\"isKosher\"\n          onChange={this.handleChange}\n          checked={this.state.dietary.isKosher}\n        />Kosher\n        </label>\n        <br />\n        <label>\n        <input \n          type=\"checkbox\"\n          name=\"isLactoseFree\"\n          onChange={this.handleChange}\n          checked={this.state.dietary.isLactoseFree}\n        />Lactose free\n        </label>\n        <br />\n        <select \n          name=\"destination\" \n          value={this.state.destination} \n          onChange={this.handleChange}\n        >\n\n          <option name=\"\">Please choose you destination</option>\n          <option name=\"germany\">Germany</option>\n          <option name=\"spain\">Spain</option>\n          <option name=\"egypt\">Egypt</option>\n          <option name=\"sri lanka\">Sri Lanka</option>\n          <option name=\"cyprus\">Cyprus</option>\n        </select>\n        <br />\n        <button>Submit</button>\n      </form>\n\n\n      <h2>Entered this info:</h2>\n      <h3>Your name: {this.state.firstName}</h3>\n      <h3>Your surname: {this.state.lastName}</h3>\n      <h3>Your age: {this.state.age}</h3>\n      <h3>You are: {this.state.gender}</h3>\n      <h3>Vegan: {this.state.dietary.isVegan ? \"Yes\" : \"No\"}</h3>\n      <h3>Kosher: {this.state.dietary.isKosher ? \"Yes\" : \"No\"}</h3>\n      <h3>Lactose free: {this.state.dietary.isLactoseFree ? \"Yes\" : \"No\"}</h3>\n      <h3>You booked a flight to: {this.state.destination}</h3>\n\n\n\n\n\n      </div>\n    )\n  }\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}